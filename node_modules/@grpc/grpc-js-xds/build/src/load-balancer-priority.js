"use strict";
/*
 * Copyright 2020 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.setup = exports.PriorityLoadBalancer = exports.PriorityLoadBalancingConfig = exports.isLocalitySubchannelAddress = void 0;
const grpc_js_1 = require("@grpc/grpc-js");
var validateLoadBalancingConfig = grpc_js_1.experimental.validateLoadBalancingConfig;
var getFirstUsableConfig = grpc_js_1.experimental.getFirstUsableConfig;
var registerLoadBalancerType = grpc_js_1.experimental.registerLoadBalancerType;
var subchannelAddressToString = grpc_js_1.experimental.subchannelAddressToString;
var QueuePicker = grpc_js_1.experimental.QueuePicker;
var UnavailablePicker = grpc_js_1.experimental.UnavailablePicker;
var ChildLoadBalancerHandler = grpc_js_1.experimental.ChildLoadBalancerHandler;
const TRACER_NAME = 'priority';
function trace(text) {
    grpc_js_1.experimental.trace(grpc_js_1.logVerbosity.DEBUG, TRACER_NAME, text);
}
const TYPE_NAME = 'priority';
const DEFAULT_FAILOVER_TIME_MS = 10000;
const DEFAULT_RETENTION_INTERVAL_MS = 15 * 60 * 1000;
function isLocalitySubchannelAddress(address) {
    return Array.isArray(address.localityPath);
}
exports.isLocalitySubchannelAddress = isLocalitySubchannelAddress;
class PriorityLoadBalancingConfig {
    constructor(children, priorities) {
        this.children = children;
        this.priorities = priorities;
    }
    getLoadBalancerName() {
        return TYPE_NAME;
    }
    toJsonObject() {
        const childrenField = {};
        for (const [childName, childValue] of this.children.entries()) {
            childrenField[childName] = {
                config: childValue.config.map(value => value.toJsonObject())
            };
        }
        return {
            [TYPE_NAME]: {
                children: childrenField,
                priorities: this.priorities
            }
        };
    }
    getChildren() {
        return this.children;
    }
    getPriorities() {
        return this.priorities;
    }
    static createFromJson(obj) {
        if (!('children' in obj && obj.children !== null && typeof obj.children === 'object')) {
            throw new Error('Priority config must have a children map');
        }
        if (!('priorities' in obj && Array.isArray(obj.priorities) && obj.priorities.every(value => typeof value === 'string'))) {
            throw new Error('Priority config must have a priorities list');
        }
        const childrenMap = new Map();
        for (const childName of obj.children) {
            const childObj = obj.children[childName];
            if (!('config' in childObj && Array.isArray(childObj.config))) {
                throw new Error(`Priority child ${childName} must have a config list`);
            }
            if (!('ignore_reresolution_requests' in childObj && typeof childObj.ignore_reresolution_requests === 'boolean')) {
                throw new Error(`Priority child ${childName} must have a boolean field ignore_reresolution_requests`);
            }
            childrenMap.set(childName, {
                config: childObj.config.map(validateLoadBalancingConfig),
                ignore_reresolution_requests: childObj.ignore_reresolution_requests
            });
        }
        return new PriorityLoadBalancingConfig(childrenMap, obj.priorities);
    }
}
exports.PriorityLoadBalancingConfig = PriorityLoadBalancingConfig;
class PriorityLoadBalancer {
    constructor(channelControlHelper) {
        this.channelControlHelper = channelControlHelper;
        /**
         * Inner class for holding a child priority and managing associated timers.
         */
        this.PriorityChildImpl = class {
            constructor(parent, name, ignoreReresolutionRequests) {
                this.parent = parent;
                this.name = name;
                this.connectivityState = grpc_js_1.connectivityState.IDLE;
                this.failoverTimer = null;
                this.deactivationTimer = null;
                this.seenReadyOrIdleSinceTransientFailure = false;
                this.childBalancer = new ChildLoadBalancerHandler(grpc_js_1.experimental.createChildChannelControlHelper(this.parent.channelControlHelper, {
                    updateState: (connectivityState, picker) => {
                        this.updateState(connectivityState, picker);
                    },
                    requestReresolution: () => {
                        if (!ignoreReresolutionRequests) {
                            this.parent.channelControlHelper.requestReresolution();
                        }
                    }
                }));
                this.picker = new QueuePicker(this.childBalancer);
                this.startFailoverTimer();
            }
            updateState(connectivityState, picker) {
                trace('Child ' + this.name + ' ' + grpc_js_1.connectivityState[this.connectivityState] + ' -> ' + grpc_js_1.connectivityState[connectivityState]);
                this.connectivityState = connectivityState;
                this.picker = picker;
                if (connectivityState === grpc_js_1.connectivityState.CONNECTING) {
                    if (this.seenReadyOrIdleSinceTransientFailure && this.failoverTimer === null) {
                        this.startFailoverTimer();
                    }
                }
                else if (connectivityState === grpc_js_1.connectivityState.READY || connectivityState === grpc_js_1.connectivityState.IDLE) {
                    this.seenReadyOrIdleSinceTransientFailure = true;
                    this.cancelFailoverTimer();
                }
                else if (connectivityState === grpc_js_1.connectivityState.TRANSIENT_FAILURE) {
                    this.seenReadyOrIdleSinceTransientFailure = false;
                    this.cancelFailoverTimer();
                }
                this.parent.onChildStateChange(this);
            }
            startFailoverTimer() {
                if (this.failoverTimer === null) {
                    trace('Starting failover timer for child ' + this.name);
                    this.failoverTimer = setTimeout(() => {
                        trace('Failover timer triggered for child ' + this.name);
                        this.failoverTimer = null;
                        this.updateState(grpc_js_1.connectivityState.TRANSIENT_FAILURE, new UnavailablePicker());
                    }, DEFAULT_FAILOVER_TIME_MS);
                }
            }
            updateAddressList(addressList, lbConfig, attributes) {
                this.childBalancer.updateAddressList(addressList, lbConfig, attributes);
            }
            exitIdle() {
                this.childBalancer.exitIdle();
            }
            resetBackoff() {
                this.childBalancer.resetBackoff();
            }
            deactivate() {
                if (this.deactivationTimer === null) {
                    this.deactivationTimer = setTimeout(() => {
                        this.parent.deleteChild(this);
                        this.childBalancer.destroy();
                    }, DEFAULT_RETENTION_INTERVAL_MS);
                }
            }
            maybeReactivate() {
                if (this.deactivationTimer !== null) {
                    clearTimeout(this.deactivationTimer);
                    this.deactivationTimer = null;
                }
            }
            cancelFailoverTimer() {
                if (this.failoverTimer !== null) {
                    clearTimeout(this.failoverTimer);
                    this.failoverTimer = null;
                }
            }
            isFailoverTimerPending() {
                return this.failoverTimer !== null;
            }
            getConnectivityState() {
                return this.connectivityState;
            }
            getPicker() {
                return this.picker;
            }
            getName() {
                return this.name;
            }
            destroy() {
                this.childBalancer.destroy();
            }
        };
        // End of inner class PriorityChildImpl
        this.children = new Map();
        /**
         * The priority order of child names from the latest config update.
         */
        this.priorities = [];
        /**
         * The attributes object from the latest update, saved to be passed along to
         * each new child as they are created
         */
        this.latestAttributes = {};
        /**
         * The latest load balancing policies and address lists for each child from
         * the latest update
         */
        this.latestUpdates = new Map();
        /**
         * Current chosen priority that requests are sent to
         */
        this.currentPriority = null;
        this.updatesPaused = false;
    }
    updateState(state, picker) {
        trace('Transitioning to ' +
            grpc_js_1.connectivityState[state]);
        /* If switching to IDLE, use a QueuePicker attached to this load balancer
         * so that when the picker calls exitIdle, that in turn calls exitIdle on
         * the PriorityChildImpl, which will start the failover timer. */
        if (state === grpc_js_1.connectivityState.IDLE) {
            picker = new QueuePicker(this);
        }
        this.channelControlHelper.updateState(state, picker);
    }
    onChildStateChange(child) {
        const childState = child.getConnectivityState();
        trace('Child ' + child.getName() + ' transitioning to ' + grpc_js_1.connectivityState[childState]);
        if (this.updatesPaused) {
            return;
        }
        this.choosePriority();
    }
    deleteChild(child) {
        this.children.delete(child.getName());
    }
    /**
     * Select the child at the specified priority, and report that child's state
     * as this balancer's state until that child disconnects or a higher-priority
     * child connects.
     * @param priority
     */
    selectPriority(priority, deactivateLowerPriorities) {
        var _a;
        this.currentPriority = priority;
        const chosenChild = this.children.get(this.priorities[priority]);
        this.updateState(chosenChild.getConnectivityState(), chosenChild.getPicker());
        if (deactivateLowerPriorities) {
            for (let i = priority + 1; i < this.priorities.length; i++) {
                (_a = this.children.get(this.priorities[i])) === null || _a === void 0 ? void 0 : _a.deactivate();
            }
        }
    }
    choosePriority() {
        if (this.priorities.length === 0) {
            this.updateState(grpc_js_1.connectivityState.TRANSIENT_FAILURE, new UnavailablePicker({ code: grpc_js_1.status.UNAVAILABLE, details: 'priority policy has empty priority list', metadata: new grpc_js_1.Metadata() }));
            return;
        }
        for (const [priority, childName] of this.priorities.entries()) {
            trace('Trying priority ' + priority + ' child ' + childName);
            let child = this.children.get(childName);
            /* If the child doesn't already exist, create it and update it.  */
            if (child === undefined) {
                const childUpdate = this.latestUpdates.get(childName);
                if (childUpdate === undefined) {
                    continue;
                }
                child = new this.PriorityChildImpl(this, childName, childUpdate.ignoreReresolutionRequests);
                this.children.set(childName, child);
                child.updateAddressList(childUpdate.subchannelAddress, childUpdate.lbConfig, this.latestAttributes);
            }
            else {
                /* We're going to try to use this child, so reactivate it if it has been
                 * deactivated */
                child.maybeReactivate();
            }
            if (child.getConnectivityState() === grpc_js_1.connectivityState.READY ||
                child.getConnectivityState() === grpc_js_1.connectivityState.IDLE) {
                this.selectPriority(priority, true);
                return;
            }
            if (child.isFailoverTimerPending()) {
                this.selectPriority(priority, false);
                /* This child is still trying to connect. Wait until its failover timer
                  * has ended to continue to the next one */
                return;
            }
        }
        /* If we didn't find any priority to try, pick the first one in the state
         * CONNECTING */
        for (const [priority, childName] of this.priorities.entries()) {
            let child = this.children.get(childName);
            if (child.getConnectivityState() === grpc_js_1.connectivityState.CONNECTING) {
                this.selectPriority(priority, false);
                return;
            }
        }
        // Did not find any child in CONNECTING, delegate to last child
        this.selectPriority(this.priorities.length - 1, false);
    }
    updateAddressList(addressList, lbConfig, attributes) {
        var _a;
        if (!(lbConfig instanceof PriorityLoadBalancingConfig)) {
            // Reject a config of the wrong type
            trace('Discarding address list update with unrecognized config ' + JSON.stringify(lbConfig.toJsonObject(), undefined, 2));
            return;
        }
        /* For each address, the first element of its localityPath array determines
         * which child it belongs to. So we bucket those addresses by that first
         * element, and pass along the rest of the localityPath for that child
         * to use. */
        const childAddressMap = new Map();
        for (const address of addressList) {
            if (!isLocalitySubchannelAddress(address)) {
                // Reject address that cannot be prioritized
                return;
            }
            if (address.localityPath.length < 1) {
                // Reject address that cannot be prioritized
                return;
            }
            const childName = address.localityPath[0];
            const childAddress = Object.assign(Object.assign({}, address), { localityPath: address.localityPath.slice(1) });
            let childAddressList = childAddressMap.get(childName);
            if (childAddressList === undefined) {
                childAddressList = [];
                childAddressMap.set(childName, childAddressList);
            }
            childAddressList.push(childAddress);
        }
        this.latestAttributes = attributes;
        this.latestUpdates.clear();
        this.priorities = lbConfig.getPriorities();
        this.updatesPaused = true;
        /* Pair up the new child configs with the corresponding address lists, and
         * update all existing children with their new configs */
        for (const [childName, childConfig] of lbConfig.getChildren()) {
            const chosenChildConfig = getFirstUsableConfig(childConfig.config);
            if (chosenChildConfig !== null) {
                const childAddresses = (_a = childAddressMap.get(childName)) !== null && _a !== void 0 ? _a : [];
                trace('Assigning child ' + childName + ' address list ' + childAddresses.map(address => '(' + subchannelAddressToString(address) + ' path=' + address.localityPath + ')'));
                this.latestUpdates.set(childName, {
                    subchannelAddress: childAddresses,
                    lbConfig: chosenChildConfig,
                    ignoreReresolutionRequests: childConfig.ignore_reresolution_requests
                });
                const existingChild = this.children.get(childName);
                if (existingChild !== undefined) {
                    existingChild.updateAddressList(childAddresses, chosenChildConfig, attributes);
                }
            }
        }
        // Deactivate all children that are no longer in the priority list
        for (const [childName, child] of this.children) {
            if (this.priorities.indexOf(childName) < 0) {
                trace('Deactivating child ' + childName);
                child.deactivate();
            }
        }
        this.updatesPaused = false;
        this.choosePriority();
    }
    exitIdle() {
        var _a;
        if (this.currentPriority !== null) {
            (_a = this.children.get(this.priorities[this.currentPriority])) === null || _a === void 0 ? void 0 : _a.exitIdle();
        }
    }
    resetBackoff() {
        for (const child of this.children.values()) {
            child.resetBackoff();
        }
    }
    destroy() {
        for (const child of this.children.values()) {
            child.destroy();
        }
        this.children.clear();
    }
    getTypeName() {
        return TYPE_NAME;
    }
}
exports.PriorityLoadBalancer = PriorityLoadBalancer;
function setup() {
    registerLoadBalancerType(TYPE_NAME, PriorityLoadBalancer, PriorityLoadBalancingConfig);
}
exports.setup = setup;
//# sourceMappingURL=load-balancer-priority.js.map