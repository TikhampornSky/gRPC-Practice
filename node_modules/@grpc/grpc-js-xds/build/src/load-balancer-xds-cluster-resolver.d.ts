import { experimental } from "@grpc/grpc-js";
import LoadBalancingConfig = experimental.LoadBalancingConfig;
import LoadBalancer = experimental.LoadBalancer;
import SubchannelAddress = experimental.SubchannelAddress;
import ChildLoadBalancerHandler = experimental.ChildLoadBalancerHandler;
import ChannelControlHelper = experimental.ChannelControlHelper;
import OutlierDetectionLoadBalancingConfig = experimental.OutlierDetectionLoadBalancingConfig;
import { XdsServerConfig } from "./xds-bootstrap";
export interface DiscoveryMechanism {
    cluster: string;
    lrs_load_reporting_server?: XdsServerConfig;
    max_concurrent_requests?: number;
    type: 'EDS' | 'LOGICAL_DNS';
    eds_service_name?: string;
    dns_hostname?: string;
    outlier_detection?: OutlierDetectionLoadBalancingConfig;
}
export declare class XdsClusterResolverLoadBalancingConfig implements LoadBalancingConfig {
    private discoveryMechanisms;
    private localityPickingPolicy;
    private endpointPickingPolicy;
    getLoadBalancerName(): string;
    toJsonObject(): object;
    constructor(discoveryMechanisms: DiscoveryMechanism[], localityPickingPolicy: LoadBalancingConfig[], endpointPickingPolicy: LoadBalancingConfig[]);
    getDiscoveryMechanisms(): DiscoveryMechanism[];
    getLocalityPickingPolicy(): experimental.LoadBalancingConfig[];
    getEndpointPickingPolicy(): experimental.LoadBalancingConfig[];
    static createFromJson(obj: any): XdsClusterResolverLoadBalancingConfig;
}
export declare class XdsClusterResolver implements LoadBalancer {
    private readonly channelControlHelper;
    private discoveryMechanismList;
    private latestConfig;
    private latestAttributes;
    private xdsClient;
    private childBalancer;
    constructor(channelControlHelper: ChannelControlHelper);
    private maybeUpdateChild;
    updateAddressList(addressList: SubchannelAddress[], lbConfig: LoadBalancingConfig, attributes: {
        [key: string]: unknown;
    }): void;
    exitIdle(): void;
    resetBackoff(): void;
    destroy(): void;
    getTypeName(): string;
}
export declare class XdsClusterResolverChildPolicyHandler extends ChildLoadBalancerHandler {
    protected configUpdateRequiresNewPolicyInstance(oldConfig: LoadBalancingConfig, newConfig: LoadBalancingConfig): boolean;
}
export declare function setup(): void;
