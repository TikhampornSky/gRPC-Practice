import { experimental } from '@grpc/grpc-js';
import Filter = experimental.Filter;
import FilterFactory = experimental.FilterFactory;
import MethodConfig = experimental.MethodConfig;
export interface ClusterResult {
    name: string;
    methodConfig: MethodConfig;
    dynamicFilterFactories: FilterFactory<Filter>[];
}
export interface RouteAction {
    toString(): string;
    getCluster(): ClusterResult;
}
export declare class SingleClusterRouteAction implements RouteAction {
    private cluster;
    private methodConfig;
    private extraFilterFactories;
    constructor(cluster: string, methodConfig: MethodConfig, extraFilterFactories: FilterFactory<Filter>[]);
    getCluster(): {
        name: string;
        methodConfig: experimental.MethodConfig;
        dynamicFilterFactories: experimental.FilterFactory<experimental.Filter>[];
    };
    toString(): string;
}
export interface WeightedCluster {
    name: string;
    weight: number;
    dynamicFilterFactories: FilterFactory<Filter>[];
}
export declare class WeightedClusterRouteAction implements RouteAction {
    private clusters;
    private totalWeight;
    private methodConfig;
    /**
     * The weighted cluster choices represented as a CDF
     */
    private clusterChoices;
    constructor(clusters: WeightedCluster[], totalWeight: number, methodConfig: MethodConfig);
    getCluster(): {
        name: string;
        methodConfig: experimental.MethodConfig;
        dynamicFilterFactories: experimental.FilterFactory<experimental.Filter>[];
    };
    toString(): string;
}
