"use strict";
/*
 * Copyright 2021 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RdsState = void 0;
const environment_1 = require("../environment");
const http_filter_1 = require("../http-filter");
const xds_stream_state_1 = require("./xds-stream-state");
const SUPPORTED_PATH_SPECIFIERS = ['prefix', 'path', 'safe_regex'];
const SUPPPORTED_HEADER_MATCH_SPECIFIERS = [
    'exact_match',
    'safe_regex_match',
    'range_match',
    'present_match',
    'prefix_match',
    'suffix_match'
];
const SUPPORTED_CLUSTER_SPECIFIERS = ['cluster', 'weighted_clusters', 'cluster_header'];
const UINT32_MAX = 0xFFFFFFFF;
function durationToMs(duration) {
    if (duration === null) {
        return null;
    }
    return (Number.parseInt(duration.seconds) * 1000 + duration.nanos / 1000000) | 0;
}
class RdsState extends xds_stream_state_1.BaseXdsStreamState {
    isStateOfTheWorld() {
        return false;
    }
    getResourceName(resource) {
        return resource.name;
    }
    getProtocolName() {
        return 'RDS';
    }
    validateRetryPolicy(policy) {
        var _a, _b, _c;
        if (policy === null) {
            return true;
        }
        const numRetries = (_b = (_a = policy.num_retries) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1;
        if (numRetries < 1) {
            return false;
        }
        if (policy.retry_back_off) {
            if (!policy.retry_back_off.base_interval) {
                return false;
            }
            const baseInterval = durationToMs(policy.retry_back_off.base_interval);
            const maxInterval = (_c = durationToMs(policy.retry_back_off.max_interval)) !== null && _c !== void 0 ? _c : (10 * baseInterval);
            if (!(maxInterval >= baseInterval) && (baseInterval > 0)) {
                return false;
            }
        }
        return true;
    }
    validateResponse(message) {
        var _a, _b, _c, _d, _e;
        // https://github.com/grpc/proposal/blob/master/A28-xds-traffic-splitting-and-routing.md#response-validation
        for (const virtualHost of message.virtual_hosts) {
            for (const domainPattern of virtualHost.domains) {
                const starIndex = domainPattern.indexOf('*');
                const lastStarIndex = domainPattern.lastIndexOf('*');
                // A domain pattern can have at most one wildcard *
                if (starIndex !== lastStarIndex) {
                    return false;
                }
                // A wildcard * can either be absent or at the beginning or end of the pattern
                if (!(starIndex === -1 || starIndex === 0 || starIndex === domainPattern.length - 1)) {
                    return false;
                }
            }
            if (environment_1.EXPERIMENTAL_FAULT_INJECTION) {
                for (const filterConfig of Object.values((_a = virtualHost.typed_per_filter_config) !== null && _a !== void 0 ? _a : {})) {
                    if (!http_filter_1.validateOverrideFilter(filterConfig)) {
                        return false;
                    }
                }
            }
            if (environment_1.EXPERIMENTAL_RETRY) {
                if (!this.validateRetryPolicy(virtualHost.retry_policy)) {
                    return false;
                }
            }
            for (const route of virtualHost.routes) {
                const match = route.match;
                if (!match) {
                    return false;
                }
                if (SUPPORTED_PATH_SPECIFIERS.indexOf(match.path_specifier) < 0) {
                    return false;
                }
                for (const headers of match.headers) {
                    if (SUPPPORTED_HEADER_MATCH_SPECIFIERS.indexOf(headers.header_match_specifier) < 0) {
                        return false;
                    }
                }
                if (route.action !== 'route') {
                    return false;
                }
                if ((route.route === undefined) || (route.route === null) || SUPPORTED_CLUSTER_SPECIFIERS.indexOf(route.route.cluster_specifier) < 0) {
                    return false;
                }
                if (environment_1.EXPERIMENTAL_FAULT_INJECTION) {
                    for (const [name, filterConfig] of Object.entries((_b = route.typed_per_filter_config) !== null && _b !== void 0 ? _b : {})) {
                        if (!http_filter_1.validateOverrideFilter(filterConfig)) {
                            return false;
                        }
                    }
                }
                if (environment_1.EXPERIMENTAL_RETRY) {
                    if (!this.validateRetryPolicy(route.route.retry_policy)) {
                        return false;
                    }
                }
                if (route.route.cluster_specifier === 'weighted_clusters') {
                    let weightSum = 0;
                    for (const clusterWeight of route.route.weighted_clusters.clusters) {
                        weightSum += (_d = (_c = clusterWeight.weight) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : 0;
                    }
                    if (weightSum === 0 || weightSum > UINT32_MAX) {
                        return false;
                    }
                    if (environment_1.EXPERIMENTAL_FAULT_INJECTION) {
                        for (const weightedCluster of route.route.weighted_clusters.clusters) {
                            for (const filterConfig of Object.values((_e = weightedCluster.typed_per_filter_config) !== null && _e !== void 0 ? _e : {})) {
                                if (!http_filter_1.validateOverrideFilter(filterConfig)) {
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        }
        return true;
    }
}
exports.RdsState = RdsState;
//# sourceMappingURL=rds-state.js.map