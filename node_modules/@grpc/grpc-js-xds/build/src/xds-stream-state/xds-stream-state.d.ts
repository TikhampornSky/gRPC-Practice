import { StatusObject } from "@grpc/grpc-js";
import { Any__Output } from "../generated/google/protobuf/Any";
export interface Watcher<UpdateType> {
    onValidUpdate(update: UpdateType): void;
    onTransientError(error: StatusObject): void;
    onResourceDoesNotExist(): void;
}
export interface ResourcePair<ResourceType> {
    resource: ResourceType;
    raw: Any__Output;
}
export interface AcceptedResourceEntry {
    name: string;
    raw: Any__Output;
}
export interface RejectedResourceEntry {
    name: string;
    raw: Any__Output;
    error: string;
}
export interface HandleResponseResult {
    accepted: AcceptedResourceEntry[];
    rejected: RejectedResourceEntry[];
    missing: string[];
}
export interface XdsStreamState<ResponseType> {
    versionInfo: string;
    nonce: string;
    getResourceNames(): string[];
    /**
     * Returns a string containing the error details if the message should be nacked,
     * or null if it should be acked.
     * @param responses
     */
    handleResponses(responses: ResourcePair<ResponseType>[], isV2: boolean): HandleResponseResult;
    reportStreamError(status: StatusObject): void;
    reportAdsStreamStart(): void;
    addWatcher(name: string, watcher: Watcher<ResponseType>): void;
    removeWatcher(resourceName: string, watcher: Watcher<ResponseType>): void;
}
export declare abstract class BaseXdsStreamState<ResponseType> implements XdsStreamState<ResponseType> {
    private updateResourceNames;
    versionInfo: string;
    nonce: string;
    private subscriptions;
    private isAdsStreamRunning;
    private ignoreResourceDeletion;
    constructor(updateResourceNames: () => void);
    protected trace(text: string): void;
    private startResourceTimer;
    addWatcher(name: string, watcher: Watcher<ResponseType>): void;
    removeWatcher(resourceName: string, watcher: Watcher<ResponseType>): void;
    getResourceNames(): string[];
    handleResponses(responses: ResourcePair<ResponseType>[]): HandleResponseResult;
    reportStreamError(status: StatusObject): void;
    reportAdsStreamStart(): void;
    private handleMissingNames;
    enableIgnoreResourceDeletion(): void;
    /**
     * Apply the validation rules for this resource type to this resource
     * instance.
     * This function is public so that the LDS validateResponse can call into
     * the RDS validateResponse.
     * @param resource The resource object sent by the xDS server
     */
    abstract validateResponse(resource: ResponseType): boolean;
    /**
     * Get the name of a resource object. The name is some field of the object, so
     * getting it depends on the specific type.
     * @param resource
     */
    protected abstract getResourceName(resource: ResponseType): string;
    protected abstract getProtocolName(): string;
    /**
     * Indicates whether responses are "state of the world", i.e. that they
     * contain all resources and that omitted previously-seen resources should
     * be treated as removed.
     */
    protected abstract isStateOfTheWorld(): boolean;
}
